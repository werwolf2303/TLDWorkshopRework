package de.werwolf2303.tldwr.frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import de.werwolf2303.tldwr.workshop.WorkshopAPI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.ArrayList;

public class UpdateModsFrame {
    private JButton updateAllButton;
    private JList<String> modList;
    private JProgressBar updateProgress;
    private JButton updateSelectedButton;
    private JLabel updateInfo;
    private JPanel contentPanel;
    private JFrame frame;
    private boolean allowClose = true;
    private ArrayList<WorkshopAPI.Mod> modsWithUpdates = new ArrayList<>();

    public UpdateModsFrame() {
        updateAllButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                allowClose = false;
                updateAllButton.setEnabled(false);
                updateSelectedButton.setEnabled(false);
                Thread updateThread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        for (WorkshopAPI.Mod mod : modsWithUpdates) {
                            updateInfo.setText(mod.Name);
                            WorkshopAPI.executeUpdate(mod, updateProgress);
                        }
                        allowClose = true;
                    }
                });
                updateThread.start();
            }
        });

        updateSelectedButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                allowClose = false;
                updateAllButton.setEnabled(false);
                updateSelectedButton.setEnabled(false);
                Thread updateThread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String selectedName = modList.getSelectedValue();
                        for (WorkshopAPI.Mod mod : modsWithUpdates) {
                            if (mod.Name.equals(selectedName)) {
                                updateInfo.setText(mod.Name);
                                WorkshopAPI.executeUpdate(mod, updateProgress);
                                break;
                            }
                        }
                        allowClose = true;
                    }
                });
                updateThread.start();
            }
        });
    }

    public void showIt(ArrayList<WorkshopAPI.Mod> modsWithUpdates) {
        this.modsWithUpdates = modsWithUpdates;
        frame = new JFrame("The Long Drive Workshop");
        frame.setContentPane(contentPanel);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (allowClose) hide();
            }
        });
        frame.setVisible(true);
        frame.pack();

        fetchUpdates(modsWithUpdates);
    }

    private void fetchUpdates(ArrayList<WorkshopAPI.Mod> modsWithUpdates) {
        for (WorkshopAPI.Mod mod : modsWithUpdates) {
            ((DefaultListModel<String>) modList.getModel()).addElement(mod.Name);
        }
    }

    public void hide() {
        frame.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.setMinimumSize(new Dimension(400, 300));
        contentPanel.setPreferredSize(new Dimension(400, 300));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        modList = new JList();
        scrollPane1.setViewportView(modList);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        updateProgress = new JProgressBar();
        panel1.add(updateProgress, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateInfo = new JLabel();
        updateInfo.setText("");
        panel1.add(updateInfo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        updateAllButton = new JButton();
        updateAllButton.setText("Update All");
        panel2.add(updateAllButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateSelectedButton = new JButton();
        updateSelectedButton.setText("Update Selected");
        panel2.add(updateSelectedButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
