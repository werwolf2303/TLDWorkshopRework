package de.werwolf2303.tldwr.frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import de.werwolf2303.tldwr.PublicValues;
import de.werwolf2303.tldwr.TLDPatcher.TLDPatcher;
import de.werwolf2303.tldwr.workshop.WorkshopAPI;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

public class MainFrame implements Frame {
    private JPanel contentPanel;
    private JButton reinstallButton;
    private JButton gotoModsButton;
    private JButton settingsButton;
    private JPanel mainFramePanel;
    private boolean drawThings = true;
    private Views currentView;
    private Views previousView;
    public WorkshopFrame workshopFrame;
    private SettingsFrame settingsFrame;
    public Modpacks modpacks;
    private JFrame frame;
    public ModPackList modPackList;
    public ModExpandedFrame modExpandedFrame;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.setMinimumSize(new Dimension(658, 555));
        contentPanel.setPreferredSize(new Dimension(658, 555));
        mainFramePanel.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(mainFramePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        gotoModsButton = new JButton();
        gotoModsButton.setText("Go To Mods");
        mainFramePanel.add(gotoModsButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 50), new Dimension(300, 50), new Dimension(300, 50), 0, false));
        reinstallButton = new JButton();
        reinstallButton.setText("Reinstall Modloader");
        mainFramePanel.add(reinstallButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 50), new Dimension(300, 50), new Dimension(300, 50), 0, false));
        settingsButton = new JButton();
        settingsButton.setText("Settings");
        mainFramePanel.add(settingsButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 50), new Dimension(300, 50), new Dimension(300, 50), 0, false));
        final Spacer spacer1 = new Spacer();
        mainFramePanel.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainFramePanel.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    public enum Views {
        Settings,
        Workshop,
        Home,
        Modpacks,
        ModpacksList,
        ModDetailedView
    }

    public MainFrame() {
        PublicValues.mainFrame = this;

        workshopFrame = new WorkshopFrame();
        GridConstraints workshopConstraints = new GridConstraints();
        $$$setupUI$$$();
        workshopConstraints.setFill(GridConstraints.FILL_BOTH);
        contentPanel.add(workshopFrame.contentPanel, workshopConstraints);
        workshopFrame.contentPanel.setVisible(false);

        settingsFrame = new SettingsFrame();
        GridConstraints settingsConstraints = new GridConstraints();
        settingsConstraints.setFill(GridConstraints.FILL_BOTH);
        contentPanel.add(settingsFrame.contentPanel, settingsConstraints);
        settingsFrame.contentPanel.setVisible(false);

        modpacks = new Modpacks();
        GridConstraints modpackConstraints = new GridConstraints();
        modpackConstraints.setFill(GridConstraints.FILL_BOTH);
        contentPanel.add(modpacks.contentPanel, modpackConstraints);
        modpacks.contentPanel.setVisible(false);

        modPackList = new ModPackList();
        GridConstraints modPackConstraints = new GridConstraints();
        modPackConstraints.setFill(GridConstraints.FILL_BOTH);
        contentPanel.add(modPackList.contentPanel, modPackConstraints);
        modPackList.contentPanel.setVisible(false);

        modExpandedFrame = new ModExpandedFrame();
        GridConstraints modExpandedConstraints = new GridConstraints();
        modExpandedConstraints.setFill(GridConstraints.FILL_BOTH);
        contentPanel.add(modExpandedFrame.getContentPanel(), modExpandedConstraints);

        gotoModsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switchView(Views.Workshop);
            }
        });

        reinstallButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new TLDPatcher().startPatching();
            }
        });

        settingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                settingsFrame.load();
                switchView(Views.Settings);
            }
        });
    }

    private ArrayList<String> upLeftText = new ArrayList<>(
            Arrays.asList("Credits:",
                    "_RainBowSheep_",
                    "RUNDEN",
                    "KolbenLP",
                    "Werwolf2303",
                    "Special thank to:",
                    "Splendid")
    );

    private void createUIComponents() {
        mainFramePanel = new JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (!drawThings) return;
                int yCache = g.getFontMetrics().getHeight() + 3;
                int xCache = 3;

                //Draw background image
                try {
                    g.drawImage(ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("/backgroundImage.png")))
                            .getScaledInstance(mainFramePanel.getWidth(), mainFramePanel.getHeight(), Image.SCALE_SMOOTH), 0, 0, null);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                g.setColor(Color.white);

                for (String text : upLeftText) {
                    g.drawString(text, xCache, yCache);
                    yCache += g.getFontMetrics().getHeight() + 3;
                }

                try {
                    Image welcomeImage = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("/welcome.png")))).getImage();
                    g.drawImage(welcomeImage, frame.getWidth() / 2 - 500 / 2, gotoModsButton.getY() / 2 - 93 / 2, null);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };
    }

    public void switchView(Views view) {
        previousView = currentView;
        switch (view) {
            case Settings:
                drawThings = false;
                mainFramePanel.setVisible(false);
                workshopFrame.contentPanel.setVisible(false);
                modpacks.contentPanel.setVisible(false);
                modPackList.contentPanel.setVisible(false);
                modExpandedFrame.getContentPanel().setVisible(false);
                settingsFrame.contentPanel.setVisible(true);
                currentView = Views.Settings;
                break;
            case Workshop:
                drawThings = false;
                mainFramePanel.setVisible(false);
                settingsFrame.contentPanel.setVisible(false);
                modpacks.contentPanel.setVisible(false);
                modPackList.contentPanel.setVisible(false);
                modExpandedFrame.getContentPanel().setVisible(false);
                workshopFrame.contentPanel.setVisible(true);
                currentView = Views.Workshop;
                break;
            case Home:
                settingsFrame.contentPanel.setVisible(false);
                workshopFrame.contentPanel.setVisible(false);
                modpacks.contentPanel.setVisible(false);
                drawThings = true;
                modPackList.contentPanel.setVisible(false);
                modExpandedFrame.getContentPanel().setVisible(false);
                mainFramePanel.setVisible(true);
                currentView = Views.Home;
                break;
            case Modpacks:
                drawThings = false;
                mainFramePanel.setVisible(false);
                workshopFrame.contentPanel.setVisible(false);
                settingsFrame.contentPanel.setVisible(false);
                modPackList.contentPanel.setVisible(false);
                modExpandedFrame.getContentPanel().setVisible(false);
                modpacks.contentPanel.setVisible(true);
                currentView = Views.Modpacks;
                break;
            case ModpacksList:
                drawThings = false;
                mainFramePanel.setVisible(false);
                workshopFrame.contentPanel.setVisible(false);
                settingsFrame.contentPanel.setVisible(false);
                modpacks.contentPanel.setVisible(false);
                modExpandedFrame.getContentPanel().setVisible(false);
                modPackList.contentPanel.setVisible(true);
                currentView = Views.ModpacksList;
                break;
            case ModDetailedView:
                drawThings = false;
                mainFramePanel.setVisible(false);
                workshopFrame.contentPanel.setVisible(false);
                settingsFrame.contentPanel.setVisible(false);
                modpacks.contentPanel.setVisible(false);
                modPackList.contentPanel.setVisible(false);
                modExpandedFrame.getContentPanel().setVisible(true);
                currentView = Views.ModDetailedView;
        }
    }

    public void navigateBack() {
        if (previousView == null) return;
        switchView(previousView);
    }

    public void open() {
        frame = new JFrame("The Long Drive Mod Workshop");

        workshopFrame.setFrame(frame);

        frame.setLocationRelativeTo(null);
        frame.setContentPane(contentPanel);
        frame.setMinimumSize(contentPanel.getMinimumSize());
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        frame.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width / 2 - contentPanel.getPreferredSize().width / 2, Toolkit.getDefaultToolkit().getScreenSize().height / 2 - contentPanel.getPreferredSize().height / 2);
        frame.setVisible(true);
        frame.pack();

        switchView(Views.Home);

        PublicValues.currentFrame = this;

        try {
            ArrayList<WorkshopAPI.Mod> modsWithUpdates = WorkshopAPI.checkForModUpdates();
            if (!modsWithUpdates.isEmpty()) {
                new UpdateModsFrame().showIt(modsWithUpdates);
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to check for updates");
        }
    }

    public void close() {
        frame.dispose();
    }
}
